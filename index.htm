<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Minimal Web Reader</title>
    <link href="https://fonts.googleapis.com/css2?family=Noto+Serif&family=Noto+Serif+SC&family=Crimson+Text&family=Lora&family=Playfair+Display&family=Noto+Sans+SC&family=Source+Han+Serif+SC&display=swap" rel="stylesheet">
    <style>
        body {
            margin: 0;
            padding: 0;
            font-size: 16px;
            transition: all 0.3s;
            font-family: 'Noto Serif', serif;
        }
        #container {
            padding: 20px;
            max-width: 900px;
            margin: 0 auto;
        }
        #reader-mode {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100vw;
            height: 100vh;
            background: #f5f5f5;
            padding: 40px;
            box-sizing: border-box;
            overflow-y: auto;
        }
        #content {
            white-space: pre-wrap;
            line-height: 1.8;
            max-width: 800px;
            margin: 0 auto;
            height: calc(100% - 80px);
            overflow: hidden;
        }
        .controls {
            margin-bottom: 20px;
            display: flex;
            flex-wrap: wrap;
            gap: 10px;
            align-items: center;
            transition: opacity 0.3s;
        }
        .controls.hidden {
            opacity: 0;
            pointer-events: none;
        }
        button, select, input {
            padding: 8px 16px;
            cursor: pointer;
            border: 1px solid #ccc;
            border-radius: 4px;
            background: #fff;
        }
        button:hover:not(:disabled), select:hover {
            background: #e0e0e0;
        }
        button:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }
        textarea {
            width: 100%;
            min-height: 250px;
            margin-bottom: 10px;
            resize: vertical;
            border: 1px solid #ccc;
            border-radius: 4px;
            padding: 10px;
            box-sizing: border-box;
        }
        #textList {
            width: 100%;
            max-height: 150px;
            overflow-y: auto;
            margin-bottom: 10px;
            padding: 5px;
            border: 1px solid #ccc;
            border-radius: 4px;
        }
        #textList option {
            padding: 5px;
        }
        #titleInput {
            flex-grow: 1;
            min-width: 150px;
        }
        .status {
            font-size: 14px;
            color: #666;
            margin-left: 10px;
        }
    </style>
</head>
<body>
    <div id="container">
        <div class="controls" role="toolbar" aria-label="Main controls">
            <input id="titleInput" type="text" placeholder="Enter title..." aria-label="Text title">
            <button onclick="saveText()">Save</button>
            <select id="textList" onchange="loadSelectedText()" size="5" aria-label="Saved texts"></select>
            <button onclick="deleteSelectedText()">Delete</button>
            <button onclick="toggleReaderMode()">Reader Mode</button>
            <select id="fontSelect" onchange="changeFont()" aria-label="Font selection">
                <option value="Noto Serif">English - Noto Serif</option>
                <option value="Crimson Text">English - Crimson Text</option>
                <option value="Lora">English - Lora</option>
                <option value="Playfair Display">English - Playfair Display</option>
                <option value="Noto Serif SC">中文 - 思源宋体 (Noto Serif SC)</option>
                <option value="Noto Sans SC">中文 - 思源黑体 (Noto Sans SC)</option>
                <option value="Source Han Serif SC">中文 - 源汉宋体</option>
            </select>
            <button onclick="readAloud()" id="playButton">Read Aloud</button>
            <button onclick="stopReading()" id="stopButton">Stop</button>
            <span id="status" class="status" role="status"></span>
        </div>
        <textarea id="textInput" placeholder="Enter or paste your text here..." aria-label="Text content"></textarea>
    </div>
    <div id="reader-mode">
        <div id="readerControls" class="controls" role="toolbar" aria-label="Reader controls">
            <button onclick="toggleReaderMode()">Exit Reader Mode</button>
            <select id="fontSelectReader" onchange="changeFont()" aria-label="Font selection">
                <option value="Noto Serif">English - Noto Serif</option>
                <option value="Crimson Text">English - Crimson Text</option>
                <option value="Lora">English - Lora</option>
                <option value="Playfair Display">English - Playfair Display</option>
                <option value="Noto Serif SC">中文 - 思源宋体 (Noto Serif SC)</option>
                <option value="Noto Sans SC">中文 - 思源黑体 (Noto Sans SC)</option>
                <option value="Source Han Serif SC">中文 - 源汉宋体</option>
            </select>
            <button onclick="increaseFont()">+</button>
            <button onclick="decreaseFont()">-</button>
            <button onclick="autoFormat()">Auto Format</button>
            <button onclick="readAloud()" id="playButtonReader">Read Aloud</button>
            <button onclick="stopReading()" id="stopButtonReader">Stop</button>
        </div>
        <div id="content" tabindex="0" aria-label="Reader content"></div>
    </div>

    <script>
        // DOM caching
        const elements = {
            container: document.getElementById('container'),
            readerMode: document.getElementById('reader-mode'),
            content: document.getElementById('content'),
            textInput: document.getElementById('textInput'),
            titleInput: document.getElementById('titleInput'),
            textList: document.getElementById('textList'),
            fontSelect: document.getElementById('fontSelect'),
            fontSelectReader: document.getElementById('fontSelectReader'),
            readerControls: document.getElementById('readerControls'),
            playButton: document.getElementById('playButton'),
            stopButton: document.getElementById('stopButton'),
            playButtonReader: document.getElementById('playButtonReader'),
            stopButtonReader: document.getElementById('stopButtonReader'),
            status: document.getElementById('status')
        };

        let isReaderMode = false;
        let speech = null;
        const STATUS_DURATION = 3000;
        let fontSize = localStorage.getItem('fontSize') ? parseInt(localStorage.getItem('fontSize')) : 28;
        let controlsTimeout;

        function saveText() {
            const title = elements.titleInput.value.trim();
            const content = elements.textInput.value.trim();
            if (!title || !content) {
                showStatus('Please enter both a title and text', 'error');
                return;
            }

            const texts = getStoredTexts();
            const existingIndex = texts.findIndex(t => t.title === title);
            try {
                if (existingIndex !== -1) {
                    texts[existingIndex].content = content;
                    texts[existingIndex].updated = Date.now();
                    showStatus('Text updated');
                } else {
                    texts.push({ title, content, created: Date.now(), updated: Date.now() });
                    showStatus('Text saved');
                }
                localStorage.setItem('readerTexts', JSON.stringify(texts));
                updateTextList();
                elements.titleInput.value = '';
            } catch (e) {
                showStatus('Storage full. Delete some texts.', 'error');
            }
        }

        function loadSelectedText() {
            const selectedTitle = elements.textList.value;
            if (!selectedTitle) return;

            const texts = getStoredTexts();
            const text = texts.find(t => t.title === selectedTitle);
            if (text) {
                elements.titleInput.value = text.title;
                elements.textInput.value = text.content;
                elements.content.textContent = text.content;
                showStatus(`Loaded "${text.title}"`);
                if (isReaderMode) updateReaderFont();
            }
        }

        function deleteSelectedText() {
            const selectedTitle = elements.textList.value;
            if (!selectedTitle) {
                showStatus('Select a text to delete', 'error');
                return;
            }

            if (confirm(`Delete "${selectedTitle}"?`)) {
                let texts = getStoredTexts();
                texts = texts.filter(t => t.title !== selectedTitle);
                localStorage.setItem('readerTexts', JSON.stringify(texts));
                updateTextList();
                elements.titleInput.value = '';
                elements.textInput.value = '';
                elements.content.textContent = '';
                showStatus(`Deleted "${selectedTitle}"`);
            }
        }

        function updateTextList() {
            const texts = getStoredTexts().sort((a, b) => b.updated - a.updated);
            const currentSelection = elements.textList.value;
            elements.textList.innerHTML = '';
            texts.forEach(text => {
                const option = document.createElement('option');
                option.value = text.title;
                option.textContent = `${text.title} (${new Date(text.updated).toLocaleString()})`;
                elements.textList.appendChild(option);
            });
            if (currentSelection && texts.some(t => t.title === currentSelection)) {
                elements.textList.value = currentSelection;
            }
        }

        function getStoredTexts() {
            const stored = localStorage.getItem('readerTexts');
            return stored ? JSON.parse(stored) : [];
        }

        function toggleReaderMode() {
            isReaderMode = !isReaderMode;
            if (isReaderMode) {
                const text = elements.textInput.value;
                elements.content.textContent = text || 'No text loaded';
                elements.readerMode.style.display = 'block';
                elements.container.style.display = 'none';
                updateReaderFont();
                syncFontSelects();
                hideControls();
            } else {
                elements.readerMode.style.display = 'none';
                elements.container.style.display = 'block';
                document.body.style.fontSize = '16px';
                clearTimeout(controlsTimeout);
                elements.readerControls.classList.remove('hidden');
            }
        }

        function changeFont() {
            const font = isReaderMode ? elements.fontSelectReader.value : elements.fontSelect.value;
            document.body.style.fontFamily = `'${font}', serif`;
            syncFontSelects();
            if (isReaderMode) updateReaderFont();
        }

        function syncFontSelects() {
            const font = elements.fontSelect.value;
            elements.fontSelectReader.value = font;
            elements.fontSelect.value = font;
        }

        function updateReaderFont() {
            elements.content.style.fontSize = `${fontSize}px`;
            localStorage.setItem('fontSize', fontSize);
        }

        function increaseFont() {
            fontSize = Math.min(fontSize + 2, 72);
            updateReaderFont();
            showStatus(`Font size: ${fontSize}px`);
        }

        function decreaseFont() {
            fontSize = Math.max(fontSize - 2, 12);
            updateReaderFont();
            showStatus(`Font size: ${fontSize}px`);
        }

        function autoFormat() {
            const text = elements.content.textContent.trim();
            if (!text) {
                showStatus('No text to format', 'error');
                return;
            }

            elements.content.style.overflow = 'hidden';
            let cleanText = text.replace(/\s+/g, ' ').trim();
            elements.content.textContent = cleanText;

            let minSize = 12;
            let maxSize = 72;
            let bestSize = minSize;
            const contentHeight = elements.content.clientHeight;
            const contentWidth = elements.content.clientWidth;

            while (minSize <= maxSize) {
                const midSize = Math.floor((minSize + maxSize) / 2);
                elements.content.style.fontSize = `${midSize}px`;
                if (elements.content.scrollHeight <= contentHeight && elements.content.scrollWidth <= contentWidth) {
                    bestSize = midSize;
                    minSize = midSize + 1;
                } else {
                    maxSize = midSize - 1;
                }
            }
            fontSize = bestSize;
            updateReaderFont();
            showStatus(`Auto-formatted to ${fontSize}px`);
        }

        function readAloud() {
            if (window.speechSynthesis.speaking) {
                window.speechSynthesis.cancel();
            }

            const text = isReaderMode ? elements.content.textContent : elements.textInput.value;
            if (!text.trim()) {
                showStatus('No text to read', 'error');
                return;
            }

            speech = new SpeechSynthesisUtterance(text);
            speech.lang = elements.fontSelect.value.includes('SC') ? 'zh-CN' : 'en-US';
            speech.rate = 1;
            speech.pitch = 1;
            speech.onend = () => {
                speech = null;
                updateTTSButtons();
                showStatus('Reading finished');
            };
            window.speechSynthesis.speak(speech);
            updateTTSButtons();
            showStatus('Reading started');
        }

        function stopReading() {
            if (window.speechSynthesis.speaking) {
                window.speechSynthesis.cancel();
                speech = null;
                updateTTSButtons();
                showStatus('Reading stopped');
            }
        }

        function updateTTSButtons() {
            const isSpeaking = window.speechSynthesis.speaking;
            elements.playButton.disabled = isSpeaking;
            elements.stopButton.disabled = !isSpeaking;
            elements.playButtonReader.disabled = isSpeaking;
            elements.stopButtonReader.disabled = !isSpeaking;
        }

        function showControls() {
            clearTimeout(controlsTimeout);
            elements.readerControls.classList.remove('hidden');
            controlsTimeout = setTimeout(hideControls, 3000);
        }

        function hideControls() {
            if (!elements.readerControls.matches(':hover')) {
                elements.readerControls.classList.add('hidden');
            }
        }

        function showStatus(message, type = 'info') {
            elements.status.textContent = message;
            elements.status.style.color = type === 'error' ? '#d00' : '#666';
            setTimeout(() => elements.status.textContent = '', STATUS_DURATION);
        }

        // Event listeners for reader mode controls
        elements.readerMode.addEventListener('mousemove', debounce(showControls, 200));
        elements.readerMode.addEventListener('mouseleave', hideControls);
        elements.readerMode.addEventListener('touchstart', showControls);

        // Debounce utility
        function debounce(func, wait) {
            let timeout;
            return function (...args) {
                clearTimeout(timeout);
                timeout = setTimeout(() => func.apply(this, args), wait);
            };
        }

        // Initialize
        updateTextList();
        elements.textInput.focus();
        updateTTSButtons();
    </script>
</body>
</html>